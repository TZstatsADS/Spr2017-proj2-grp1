for (i in 1:length(a$date)) {
a$driversON[i] <- count(df_driver2$StartDate == a$date[i])[[2]][2]
}
View(a)
for (i in 1:length(a$date)) {
a$driversON[i] <- count(df_driver2$StartDate == a$date[i])[[2]][2]
a$driversOFF[i] <- count(df_driver2$EndDate == a$date[i])[[2]][2]
}
View(a)
count(df_driver2$EndDate == "2013-03-08")
View(a)
a$TotalDriversUpTo <- cumsum(a$driversON)
View(a)
a <- data.frame(date = survival1$date,
driversON = 0,
driversOFF = 0)
for (i in 1:length(a$date)) {
a$driversON[i] <- count(df_driver2$StartDate == a$date[i])[[2]][2]
a$driversOFF[i] <- count(df_driver2$EndDate == a$date[i])[[2]][2]
a$TotalDriversUpTo[i] <- cumsum(a$driversON)
}
a[is.na(a)] <- 0
a$TotalDriversUpTo <- cumsum(a$driversON)
a$TotalDriversLeft <- a$TotalDriversUpTo - a$driversOFF
View(a)
a$Survival <- a$TotalDriversLeft / a$TotalDriversUpTo
a$TotalDriversUpTo <- cumsum(a$driversON)
a$TotalDriversLeft <- cumsum(a$driversOFF)
a$TotalDriversSurviving <- a$TotalDriversUpTo - a$TotalDriversLeft
a$Survival <- a$TotalDriversSurviving / a$TotalDriversUpTo
a[-which(a$date == "2013-05-24"), ]
a2 <- a[-which(a$date == "2013-05-24"), ]
View(a2)
plot(a$date, a2$Survival)
plot(a2$date, a2$Survival)
survival.pro <- data.frame(date = survival1$date,
driversON = 0,
driversOFF = 0)
for (i in 1:length(survival.pro$date)) {
survival.pro$driversON[i] <- count(df_driver2$StartDate[df_driver2$clusterByAve == 1] == survival.pro$date[i])[[2]][2]
survival.pro$driversOFF[i] <- count(df_driver2$EndDate[df_driver2$clusterByAve == 1] == survival.pro$date[i])[[2]][2]
}
View(survival.pro)
survival.pro[is.na(survival.pro)] <- 0
survival.pro$TotalDriversUpTo <- cumsum(survival.pro$driversON)
survival.pro$TotalDriversLeft <- cumsum(survival.pro$driversOFF)
survival.pro$TotalDriversSurviving <- survival.pro$TotalDriversUpTo - survival.pro$TotalDriversLeft
survival.pro$Survival <- survival.pro$TotalDriversSurviving / survival.pro$TotalDriversUpTo
survival.pro2 <- survival.pro[-which(survival.pro$date == "2013-05-24"), ]
plot(survival.pro2$date, survival.pro2$Survival)
View(survival.pro2)
survival.pro <- data.frame(date = survival1$date,
driversON = 0,
driversOFF = 0)
for (i in 1:length(survival.pro$date)) {
survival.pro$driversON[i] <- count(df_driver2$StartDate[df_driver2$clusterByAve == 2] == survival.pro$date[i])[[2]][2]
survival.pro$driversOFF[i] <- count(df_driver2$EndDate[df_driver2$clusterByAve == 2] == survival.pro$date[i])[[2]][2]
}
survival.pro[is.na(survival.pro)] <- 0
survival.pro$TotalDriversUpTo <- cumsum(survival.pro$driversON)
survival.pro$TotalDriversLeft <- cumsum(survival.pro$driversOFF)
survival.pro$TotalDriversSurviving <- survival.pro$TotalDriversUpTo - survival.pro$TotalDriversLeft
survival.pro$Survival <- survival.pro$TotalDriversSurviving / survival.pro$TotalDriversUpTo
survival.pro2 <- survival.pro[-which(survival.pro$date == "2013-05-24"), ]
plot(survival.pro2$date, survival.pro2$Survival)
survival.pro <- data.frame(date = survival1$date,
driversON = 0,
driversOFF = 0)
for (i in 1:length(survival.pro$date)) {
survival.pro$driversON[i] <- count(df_driver2$StartDate[df_driver2$clusterByAve == 2] == survival.pro$date[i])[[2]][2]
survival.pro$driversOFF[i] <- count(df_driver2$EndDate[df_driver2$clusterByAve == 2] == survival.pro$date[i])[[2]][2]
}
survival.pro[is.na(survival.pro)] <- 0
survival.pro$TotalDriversUpTo <- cumsum(survival.pro$driversON)
survival.pro$TotalDriversLeft <- cumsum(survival.pro$driversOFF)
survival.pro$TotalDriversSurviving <- survival.pro$TotalDriversUpTo - survival.pro$TotalDriversLeft
survival.pro$Survival <- survival.pro$TotalDriversSurviving / survival.pro$TotalDriversUpTo
survival.pro2 <- survival.pro[-which(survival.pro$date == "2013-05-24"), ]
plot(survival.pro2$date, survival.pro2$Survival)
# casual
survival.pro <- data.frame(date = survival1$date,
driversON = 0,
driversOFF = 0)
for (i in 1:length(survival.casual$date)) {
survival.casual$driversON[i] <- count(df_driver2$StartDate[df_driver2$clusterByAve == 1] == survival.casual$date[i])[[2]][2]
survival.casual$driversOFF[i] <- count(df_driver2$EndDate[df_driver2$clusterByAve == 1] == survival.casual$date[i])[[2]][2]
}
survival.pro <- data.frame(date = survival1$date,
driversON = 0,
driversOFF = 0)
for (i in 1:length(survival.pro$date)) {
survival.pro$driversON[i] <- count(df_driver2$StartDate[df_driver2$clusterByAve == 2] == survival.pro$date[i])[[2]][2]
survival.pro$driversOFF[i] <- count(df_driver2$EndDate[df_driver2$clusterByAve == 2] == survival.pro$date[i])[[2]][2]
}
survival.pro[is.na(survival.pro)] <- 0
survival.pro$TotalDriversUpTo <- cumsum(survival.pro$driversON)
survival.pro$TotalDriversLeft <- cumsum(survival.pro$driversOFF)
survival.pro$TotalDriversSurviving <- survival.pro$TotalDriversUpTo - survival.pro$TotalDriversLeft
survival.pro$Survival <- survival.pro$TotalDriversSurviving / survival.pro$TotalDriversUpTo
survival.pro2 <- survival.pro[-which(survival.pro$date == "2013-05-24"), ]
plot(survival.pro2$date, survival.pro2$Survival)
# casual
survival.casual <- data.frame(date = survival1$date,
driversON = 0,
driversOFF = 0)
for (i in 1:length(survival.casual$date)) {
survival.casual$driversON[i] <- count(df_driver2$StartDate[df_driver2$clusterByAve == 1] == survival.casual$date[i])[[2]][2]
survival.casual$driversOFF[i] <- count(df_driver2$EndDate[df_driver2$clusterByAve == 1] == survival.casual$date[i])[[2]][2]
}
survival.casual[is.na(survival.casual)] <- 0
survival.casual$TotalDriversUpTo <- cumsum(survival.casual$driversON)
survival.casual$TotalDriversLeft <- cumsum(survival.casual$driversOFF)
survival.casual$TotalDriversSurviving <- survival.casual$TotalDriversUpTo - survival.casual$TotalDriversLeft
survival.casual$Survival <- survival.casual$TotalDriversSurviving / survival.casual$TotalDriversUpTo
survival.casual2 <- survival.casual[-which(survival.casual$date == "2013-05-24"), ]
plot(survival.casual2$date, survival.casual2$Survival)
install.packages('survminer')
library('survminer')
library(RTCGA.clinical)
survivalTCGA(BRCA.clinical, OV.clinical,
extract.cols = "admin.disease_code") -> BRCAOV.survInfo
source("https://bioconductor.org/biocLite.R")
biocLite("RTCGA.clinical")
a
a
BRCAOV.survInfo
survivalTCGA(BRCA.clinical, OV.clinical,
extract.cols = "admin.disease_code") -> BRCAOV.survInfo
library(RTCGA.clinical)
survivalTCGA(BRCA.clinical, OV.clinical,
extract.cols = "admin.disease_code") -> BRCAOV.survInfo
View(BRCAOV.survInfo)
View(df_driver2)
ggplot(df_driver2, aes(TotalDays, aveBillDay, color = df_driver2$clusterByAve)) + geom_point()
ggplot(df_driver2, aes(aveNumTripsDay, aveBillDay, color = df_driver2$clusterByAve)) + geom_point()
ggplot(df_driver2, aes(aveNumTripsDay, TotalBill, color = df_driver2$clusterByAve)) + geom_point()
ggplot(df_driver2, aes(TotalDays, TotalBill, color = df_driver2$clusterByAve)) + geom_point()
ggplot(df_driver2, aes(TotalDays, aveBillDay, color = df_driver2$clusterByAve)) + geom_point()
driver_df <- df_driver2
driver_df$clusterByAve
ggplot(df_driver2, aes(TotalDays, aveBillDay, color = df_driver2$clusterByAve)) + geom_point()
ggplot(df_driver2, aes(aveNumTripsDay, aveBillDay, color = df_driver2$clusterByAve)) + geom_point()
ggplot(df_driver2, aes(aveNumTripsDay, TotalBill, color = df_driver2$clusterByAve)) + geom_point()
ggplot(df_driver2, aes(TotalDays, TotalBill, color = df_driver2$clusterByAve)) + geom_point()
ggplot(df_driver2, aes(TotalDays, aveBillDay, color = df_driver2$clusterByAve)) + geom_point()
levels(driver_df$clusterByAve) <- list("pro" <- 2,
"casual" <- 1)
levels(driver_df$clusterByAve) <- c("casual, pro")
driver_df$clusterByAve
levels(driver_df$clusterByAve)[levels(driver_df$clusterByAve)=="1"] <- "casual"
View(driver_df)
levels(driver_df$clusterByAve)[levels(driver_df$clusterByAve)=="2"] <- "pro"
ggplot(driver_df, aes(TotalDays, aveBillDay, color = driver_df$clusterByAve)) + geom_point()
ggplot(driver_df, aes(aveNumTripsDay, aveBillDay, color = driver_df$clusterByAve)) + geom_point()
ggplot(driver_df, aes(aveNumTripsDay, TotalBill, color = driver_df$clusterByAve)) + geom_point()
ggplot(driver_df, aes(TotalDays, TotalBill, color = driver_df$clusterByAve)) + geom_point()
ggplot(driver_df, aes(TotalDays, aveBillDay, color = driver_df$clusterByAve)) + geom_point()
ggplot(driver_df, aes(aveNumTripsDay, TotalBill, color = driver_df$clusterByAve)) + geom_point()
ggplot(driver_df, aes(aveBillDay, TotalBill, color = driver_df$clusterByAve)) + geom_point()
ggplot(driver_df, aes(TotalDays, aveBillDay, color = driver_df$clusterByAve)) + geom_point()
ggplot(driver_df, aes(aveNumTripsDay, aveBillDay, color = driver_df$clusterByAve)) + geom_point()
ggplot(driver_df, aes(TotalDays, TotalBill, color = driver_df$clusterByAve)) + geom_point()
ggplot(driver_df, aes(TotalDays, aveBillDay, color = driver_df$clusterByAve)) + geom_point()
count(driver_df$clusterByAve == "pro")
summary(transactions_date2$dayofwk_norank)
data(tongue)
library(survival)
?Surv
View(survival.casual)
survival.casual3 <- survival.casual2[, c("date", "Survival")]
survival.pro3 <- survival.pro2[, c("date", "Survival")]
merge(survival.casual3, survival.pro3)
survival.plot <- merge(survival.casual3, survival.pro3)
View(survival.plot)
View(survival.casual3)
View(survival.pro3)
survival.plot <- merge(survival.casual3, survival.pro3, by = date)
?merge
survival.plot <- merge(survival.casual3, survival.pro3, by = "date")
View(survival.plot)
colnames(survival.plot) <- c("date", "Casual", "Pro")
ggplot(survival.plot, aes(date)) +
geom_line(aes(y = "Casual", colour = "Casual")) +
geom_line(aes(y = "Pro", colour = "Pro"))
survival.plot2 <- melt(survival.plot, id = "date")
library("reshape2")
survival.plot2 <- melt(survival.plot, id = "date")
View(survival.plot2)
ggplot(data= survival.plot2,
aes(x= date, y=value, colour= variable)) +
geom_line()
ggplot(data= survival.plot2,
aes(x= date, y=value, colour= variable)) +
geom_line() +  geom_point(data=d, mapping=aes(x=a, y=0.5, shape=a), size=10)
ggplot(data= survival.plot2,
aes(x= date, y=value, colour= variable)) +
geom_line() +  geom_point(mapping=aes(x=a, y=0.5, shape=a), size=10)
ggplot(data= survival.plot2,
aes(x= date, y=value, colour= variable)) +
geom_line() +  geom_point(mapping=aes(shape=a), size=10)
ggplot(data= survival.plot2,
aes(x= date, y=value, colour= variable)) +
geom_line() +  geom_point()
ggplot(data= survival.plot2,
aes(x= date, y=value, colour= variable)) +
geom_line() +  geom_point(aes(shape = 3))
ggplot(data= survival.plot2,
aes(x= date, y=value, colour= variable, shape = 3)) +
geom_line() +  geom_point()
ggplot(data= survival.plot2,
aes(x= date, y=value, colour= variable)) +
geom_line() +  geom_point(aes(x=x,y=value,shape=3))
ggplot(data= survival.plot2,
aes(x= date, y=value, colour= variable)) +
geom_point(aes(x=x,y=value,shape=3))
ggplot(data= survival.plot2,
aes(x= date, y=value, colour= variable)) +
geom_line() +  geom_point(shape=3)
ggplot(data= survival.plot2,
aes(x= date, y=value, colour= variable)) +
geom_line() +  geom_point(shape=3) +
ggtitle("Survival Model for Drivers by Type")
colnames(survival.plot2) <- c("date", "DriverType", "Survival Probability")
ggplot(data= survival.plot2,
aes(x= date, y= "Survival Probability", colour= DriverType)) +
geom_line() +  geom_point(shape=3) +
ggtitle("Survival Model for Drivers by Type") +
theme(plot.title = element_text(hjust = .5, size = 20))
ggplot(data= survival.plot2,
aes(x= date, y= "Survival Probability", colour= "DriverType")) +
geom_line() +  geom_point(shape=3) +
ggtitle("Survival Model for Drivers by Type") +
theme(plot.title = element_text(hjust = .5, size = 20))
ggplot(data= survival.plot2,
aes(x= date, y= Survival Probability, colour= DriverType)) +
colnames(survival.plot2) <- c("date", "DriverType", "SurvivalProbability")
ggplot(data= survival.plot2,
aes(x= date, y= SurvivalProbability, colour= DriverType)) +
geom_line() +  geom_point(shape=3) +
ggtitle("Survival Model for Drivers by Type") +
theme(plot.title = element_text(hjust = .5, size = 20))
ggplot(data= survival.plot2,
aes(x= date, y= SurvivalProbability, colour= DriverType)) +
geom_line() +  geom_point(shape=3) +
ggtitle("Survival Model for Drivers by Type") +
theme(plot.title = element_text(hjust = .5, size = 15))
ggplot(data= survival.plot2,
aes(x= date, y= SurvivalProbability, colour= DriverType)) +
geom_line() +  geom_point(shape=3) +
ggtitle("Survival Model for Drivers by Type") +
theme(plot.title = element_text(hjust = .5, size = 18))
survival.casual2$day <- 1:nrow(survival.casual2)
View(survival.casual2)
survival.pro2$day <- 1:nrow(survival.pro2)
survival.casual3 <- survival.casual2[, c("day", "Survival")]
survival.pro3 <- survival.pro2[, c("day", "Survival")]
survival.plot <- merge(survival.casual3, survival.pro3, by = "day")
survival.plot2 <- melt(survival.plot, id = "day")
colnames(survival.plot2) <- c("day", "DriverType", "SurvivalProbability")
ggplot(data= survival.plot2,
aes(x = day, y = SurvivalProbability, colour = DriverType)) +
geom_line() +  geom_point(shape=3) +
ggtitle("Survival Model for Drivers by Type") +
theme(plot.title = element_text(hjust = .5, size = 18))
survival.casual3 <- survival.casual2[, c("day", "Survival")]
survival.pro3 <- survival.pro2[, c("day", "Survival")]
survival.plot <- merge(survival.casual3, survival.pro3, by = "day")
colnames(survival.plot) <- c("day", "Casual", "Pro")
survival.plot2 <- melt(survival.plot, id = "day")
colnames(survival.plot2) <- c("day", "DriverType", "SurvivalProbability")
ggplot(data= survival.plot2,
aes(x = day, y = SurvivalProbability, colour = DriverType)) +
geom_line() +  geom_point(shape=3) +
ggtitle("Survival Model for Drivers by Type") +
theme(plot.title = element_text(hjust = .5, size = 18))
ggplot(data = survival.plot2,
aes(x = day, y = SurvivalProbability, colour = DriverType)) +
geom_line() +  geom_point(shape=3) +
ggtitle("Kaplan-Meier Survival Estimates for Drivers by Type") +
theme(plot.title = element_text(hjust = .5, size = 18))
survival.casual.lm <- lm(casual ~ day, data = survival.plot)
survival.casual.lm <- lm(Casual ~ day, data = survival.plot)
summary(survival.casual.lm)
survival.pro.lm <- lm(Pro ~ day, data = survival.plot)
summary(survival.pro.lm)
survival.pro.lm <- lm(Pro ~ day^2, data = survival.plot)
summary(survival.pro.lm)
survival.pro.lm <- lm(Pro ~ (day)^2, data = survival.plot)
summary(survival.pro.lm)
ggplot(data = survival.plot2,
aes(x = day, y = SurvivalProbability, colour = DriverType)) +
geom_line() +  geom_point(shape=3) +
ggtitle("Kaplan-Meier Survival Estimates for Drivers by Type") +
theme(plot.title = element_text(hjust = .5, size = 18))
survival.plot$day2 <- (survival.plot$day)^2
survival.pro.lm <- lm(Pro ~ day2, data = survival.plot)
summary(survival.pro.lm)
survival.pro.lm <- lm(Pro ~ day + day2, data = survival.plot)
summary(survival.pro.lm)
?predict
predict(survival.pro.lm, day = 30)
predict(survival.pro.lm)
exp(day)
exp(survival.pro.lm$day)
?exp
exp(survival.plot$day)
survival.plot$dayE <- exp(survival.plot$day)
survival.pro.lm <- lm(Pro ~ dayE, data = survival.plot)
summary(survival.pro.lm)
survival.plot$dayE <- ln(survival.plot$day)
survival.plot$dayE <- log(survival.plot$day)
survival.pro.lm <- lm(Pro ~ dayE, data = survival.plot)
summary(survival.pro.lm)
survival.pro.lm <- lm(Pro ~ day + day2, data = survival.plot)
summary(survival.pro.lm)
predict(survival.pro.lm, day = 3)
predict(survival.pro.lm, "day" = 3)
predict(survival.pro.lm, "day" = 100)
predict.lm(survival.pro.lm, "day" = 100)
predict.lm(survival.pro.lm, newdata = list("day" = 100))
predict(survival.pro.lm, newdata = list("day" = 100))
predict(survival.pro.lm, newdata = list("day" = 100, "day" = 10000))
predict(survival.pro.lm, newdata = list("day" = 100, "day2" = 10000))
predict(survival.pro.lm, newdata = list("day" = 120, "day2" = 120^2))
predict(survival.pro.lm, newdata = list("day" = 150, "day2" = 150^2))
predict(survival.pro.lm, newdata = list("day" = 130, "day2" = 130^2))
predict(survival.pro.lm, newdata = list("day" = 125, "day2" = 125^2))
predict(survival.pro.lm, newdata = list("day" = 128, "day2" = 128^2))
ggplot(data = survival.plot2,
aes(x = day, y = SurvivalProbability, colour = DriverType)) +
geom_line() +  geom_point(shape=3) +
ggtitle("Kaplan-Meier Survival Estimates for Drivers by Type") +
theme(plot.title = element_text(hjust = .5, size = 18))
survival.plot2$SurvivalProbabilityLog <- log2(survival.plot2$SurvivalProbabilityLog)
survival.plot2$SurvivalProbabilityLog <- log2(survival.plot2$SurvivalProbability)
ggplot(data = survival.plot2,
aes(x = day, y = SurvivalProbabilityLog, colour = DriverType)) +
geom_line() +  geom_point(shape=3) +
ggtitle("Kaplan-Meier Survival Estimates for Drivers by Type") +
theme(plot.title = element_text(hjust = .5, size = 18))
survival.plot2$SurvivalProbabilityLogE <- log(survival.plot2$SurvivalProbability)
ggplot(data = survival.plot2,
aes(x = day, y = SurvivalProbabilityLogE, colour = DriverType)) +
geom_line() +  geom_point(shape=3) +
ggtitle("Kaplan-Meier Survival Estimates for Drivers by Type") +
theme(plot.title = element_text(hjust = .5, size = 18))
ggplot(data = survival.plot2,
aes(x = day, y = SurvivalProbability, colour = DriverType)) +
geom_line() +  geom_point(shape=3) +
ggtitle("Kaplan-Meier Survival Estimates for Drivers by Type") +
theme(plot.title = element_text(hjust = .5, size = 18))
mean(driver_df$aveBillDay[driver_df$clusterByAve == 1])
driver_df$aveBillDay[driver_df$clusterByAve == 1]
driver_df$aveBillDay[which(driver_df$clusterByAve == 1)]
driver_df$aveBillDay[driver_df$clusterByAve == "Pro"]
View(driver_df)
driver_df$aveBillDay[driver_df$clusterByAve == "pro"]
mean(driver_df$aveBillDay[driver_df$clusterByAve == "pro"])
mean(driver_df$aveBillDay[driver_df$clusterByAve == "casual"])
regression <- lm(totalbill ~ aveNumTripsDay + aveBillDay + TotalNumTrips + TotalDays + startDate, data = driver_df)
regression <- lm(TotalBill ~ aveNumTripsDay + aveBillDay + TotalNumTrips + TotalDays + startDate, data = driver_df)
regression <- lm(TotalBill ~ aveNumTripsDay + aveBillDay + TotalNumTrips + TotalDays + StartDate, data = driver_df)
summary(regression)
regression2 <- lm(TotalBill ~ TotalNumTrips + TotalDays + StartDate, data = driver_df)
summary(regression2)
regression2 <- lm(TotalBill ~ TotalNumTrips + TotalDays + StartDate + clusterByAve, data = driver_df)
summary(regression2)
regression2 <- lm(TotalBill ~ TotalNumTrips + TotalDays + aveBillDay + StartDate + clusterByAve, data = driver_df)
summary(regression2)
regression2 <- lm(TotalBill ~ TotalNumTrips + aveBillDay + StartDate + clusterByAve, data = driver_df)
summary(regression2)
reg <- lm(Cumulative.Dollar ~ Nth.day + driver_id + Cumulative.Count + dayofwk_norank, data = transactions_date2)
summary(reg)
reg <- lm(Cumulative.Dollar ~ Nth.day + driver_id + dayofwk_norank, data = transactions_date2)
reg <- lm(Cumulative.Dollar ~ Nth.day + driver_id + dayofwk_norank, data = transactions_date2)
summary(reg)
summary(lm(Cumulative.Dollar ~ Nth.day +, data = transactions_date2))
summary(lm(Cumulative.Dollar ~ Nth.day, data = transactions_date2))
reg <- lm(Cumulative.Dollar ~ Nth.day + Cumulative.Count+ driver_id + dayofwk_norank, data = transactions_date2)
summary(reg)
reg <- lm(Cumulative.Dollar ~ Nth.day + Cumulative.Count + driver_id, data = transactions_date2)
summary(reg)
reg <- lm(Cumulative.Dollar ~ Nth.day + Cumulative.Count + as.factor(driver_id), data = transactions_date2)
summary(reg)
reg <- lm(Cumulative.Dollar ~ Nth.day + Cumulative.Count, data = transactions_date2)
summary(reg)
regression2 <- lm(TotalBill ~ TotalNumTrips + aveBillDay + StartDate + clusterByAve, data = driver_df)
summary(regression2)
regression2 <- lm(TotalBill ~ TotalNumTrips + aveBillDay + StartDate, data = driver_df)
summary(regression2)
regression2 <- lm(TotalBill ~ TotalNumTrips + TotalDays + aveBillDay + StartDate, data = driver_df)
summary(regression2)
regression2 <- lm(TotalBill ~ TotalDays + aveBillDay + StartDate, data = driver_df)
summary(regression2)
regression2 <- lm(TotalBill ~ TotalDays + StartDate, data = driver_df)
summary(regression2)
regression2 <- lm(TotalBill ~ TotalDays + aveNumTripsDay + StartDate, data = driver_df)
summary(regression2)
regression1 <- lm(aveBillDay ~ aveNumTripsDay + TotalNumTrips + TotalDays + TotalBill + StartDate, data = driver_df)
summary(regression1)
regression1 <- lm(aveBillDay ~ aveNumTripsDay + TotalNumTrips + TotalDays + StartDate, data = driver_df)
summary(regression1)
regression2 <- lm(TotalDays ~ aveBillDay + aveNumTripsDay + TotalNumTrips + StartDate, data = driver_df)
summary(regression2)
regression1 <- lm(aveBillDay ~ TotalNumTrips + TotalDays + StartDate, data = driver_df)
summary(regression1)
regression2 <- lm(TotalDays ~ aveBillDay + aveNumTripsDay + StartDate, data = driver_df)
summary(regression2)
regression.pro <- lm(TotalDays ~ aveBillDay + aveNumTripsDay + StartDate, data = driver_df[driver_df$clusterByAve == "pro"])
regression.pro <- lm(TotalDays ~ aveBillDay + aveNumTripsDay + StartDate, data = driver_df[which(driver_df$clusterByAve == "pro"), ])
summary(regression.pro)
regression2 <- lm(TotalDays ~ aveBillDay + aveNumTripsDay, data = driver_df)
summary(regression2)
regression2 <- lm(TotalDays ~ aveBillDay + aveNumTripsDay + TotalBill, data = driver_df)
summary(regression2)
regression2 <- lm(TotalDays ~ aveBillDay + aveNumTripsDay, data = driver_df)
summary(regression2)
regression2 <- lm(TotalDays ~ aveBillDay, data = driver_df)
regression3 <- lm(TotalDays ~ aveBillDay, data = driver_df)
summary(regression3)
summary(lm(total_bill_usd ~ relevel(dayofwk_norank, ref = "Tues"), data = transactions2))
summary(lm(total_bill_usd ~ relevel(dayofwk_norank, ref = "Sun"), data = transactions2))
setwd("C:/Users/samsung/ADS/Spr2017-proj2-grp1/doc")
neighborhoods <- read.csv("../output/neighborhood_centroids_latlong.csv", header=TRUE)
## comment out the dataset depending on the size/name of file which we are using
cabdata <- read.csv("../data/smallcabdata_noneighborhood.csv", header = TRUE)
# cabdata <- read.csv("../data/cabdata_noneighborhood.csv", header = TRUE)
# only use 100 rows of data to test for other parts of projs. comment out after not needed
cabdata <- cabdata[1:100, ]
# to select the columns needed, and also to flip lat and long columns
cabdata2 <- cabdata[, c(2, 4, 3)]
## sample functions from online which clusters cab data by neighborhoods:
distances <- outer(
1:nrow(cabdata2),
1:nrow(neighborhoods),
Vectorize( function(i,j) {
sum( (cabdata2[i,(2:3)] - neighborhoods[j,(3:4)])^2 )
} )
)
# Find the nearest cluster
clusters <- apply(distances, 1, which.min)
# attach neighborhood to cab data
cabdata2$borough <- neighborhoods[clusters, "Borough"]
cabdata2$neighborhood <- neighborhoods[clusters, "NeighborhoodName"]
# write df into a csv file for use in other files later
write.csv(cabdata2, file = "../output/cab_neighborhood.csv", row.names = F)
View(neighborhoods)
View(cabdata2)
yelpdata = read.csv("../output/yelpdata.csv")
head(yelpdata)
identifyNeighborhoodsAndBoroughs <- function(df, shapefile){
library(raster)
library(rgeos)
origDf <- df
coordinates(df) <- ~LON+LAT
proj4string(df) <- CRS("+proj=longlat +datum=WGS84")
df <- spTransform(df, proj4string(shapefile))
shapefile_where <- df %over% shapefile
origDf$mapped_neighborhood <- shapefile_where$NTAName
origDf$mapped_borough <- shapefile_where$BoroName
return(origDf)
}
help("spTransform")
shapefile = "../data/nynta_16d/nynta.shp"
test = identifyNeighborhoodsAndBoroughs(yelpdata, shapefile)
help("proj4string")
cab = read.csv("../data/smallcabdata_noneighborhood.csv")
head(cab)
cab = cab[,c("lon","lat", "borough", "neighborhood")]
head(cab)
colnames(cab) = c("LON", "LAT", "borough", "neighborhood")
head(cab)
help(sample)
smallrows = sample(1:nrow(cab), nrow(cab) * .25, replace = FALSE)
smallCab = cab[smallrow,]
smallCab = cab[smallrows,]
write.csv("../output/smallcabdata_noneighborhood.csv")
write.csv(smallCab, "../output/smallcabdata_noneighborhood.csv")
smallrows = sample(1:nrow(cab), nrow(cab) * .4, replace = FALSE)
smallCab = cab[smallrows,]
write.csv("../output/smallcabdata_noneighborhood2.csv")
write.csv(smallCab, "../output/smallcabdata_noneighborhood2.csv")
smallrows = sample(1:nrow(cab), nrow(cab) * .37, replace = FALSE)
smallCab = cab[smallrows,]
write.csv(smallCab, "../output/smallcabdata_noneighborhood.csv")
smallrows = sample(1:nrow(cab), nrow(cab) * .36, replace = FALSE)
smallCab = cab[smallrows,]
write.csv(smallCab, "../output/smallcabdata_noneighborhood.csv")
smallrows = sample(1:nrow(cab), nrow(cab) * .35, replace = FALSE)
smallCab = cab[smallrows,]
write.csv(smallCab, "../output/smallcabdata_noneighborhood.csv")
cab = read.csv("../output/smallcabdata_noneighborhood2.csv")
cab= cab[,c("lon", "lat", "neighborhood", "borough")]
head(cab)
colnames(cab)[1] = "LON"
colnames(cab)[2] = "LAT"
head(cab)
write.csv(cab, "../output/smallcabdata_noneighborhood2.csv")
install.packages(shapefile)
library(shapefile)
install.packages("shapefiles")
library(shapefiles)
test = readh.shapefiles(shapefile)
test = read.shapefiles(shapefile)
test = read.shapefile(shapefile)
shpefile = "../data/nynta_16d/nynta"
test = read.shapefile(shapefile)
test = read.shapefile(shpefile)
testout = identifyNeighborhoodsAndBoroughs(yelpdata, test)
testout = identifyNeighborhoodsAndBoroughs(yelpdata, test$shp)
testout = identifyNeighborhoodsAndBoroughs(yelpdata, test$shp$shp)
test$shp$shp
