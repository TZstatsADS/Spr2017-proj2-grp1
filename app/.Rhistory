#list<-list(iteration,z_history)
#names(list)<-c("iteration","z_history")
return(z_history[1:(iteration-1),])
}
perceptrain(fake.data$S,fake.data$y)
z3<-rnorm(3)
fake.data3<-fakedata(z3,100)
yhat3<-perceptrain(fake.data3$S,fake.data3$y)
#Create function "classify"
classify<-function(S,z){
yhat<- NA
for (i in 1:nrow(S)){
yhat[i]<- ifelse(S[i,]%*%z<=0,-1,1)
}
return (yhat)
}
#Simulate data
set.seed(100)
z<-rnorm(3,mean=7,sd=3)
#c<--z[length(z)]
fake.data<-fakedata(z,100)
#Apply the function
classify(fake.data$S,z)
perceptrain<-function(S,y){
k<-1
z_history<-matrix(NA,nrow=10000,ncol=ncol(S))
z_history[1,]<-rep(1,length(z))
while (1){
#y<-fake.data$y
yhat<-classify(S,z_history[k,])
indicator<-ifelse(y==yhat,0,1)
a<-abs(z_history[k,]%*%t(S))
cost<-sum(a*indicator)
#cost<-sum(indicator%*%abs(z%*%(cbind(rep(1,ncol(fake.data$S)),fake.data$S[,-ncol(fake.data$S)]))))
if (cost<=0.0001|k>=nrow(z_history))
break
else {
derivative<-colSums(indicator*(-y)*S)
z_history[k+1,]<-z_history[k,]-(1/k)*derivative
k<-k+1
}
}
iteration<-which(is.na(z_history))[1]
#list<-list(iteration,z_history)
#names(list)<-c("iteration","z_history")
return(z_history[1:(iteration-1),])
}
perceptrain(fake.data$S,fake.data$y)
z3<-rnorm(3)
fake.data3<-fakedata(z3,100)
yhat3<-perceptrain(fake.data3$S,fake.data3$y)
#The misclassification rate is
length(yhat3[yhat3!=fake.data3$y])/100
z3<-rnorm(3)
fake.data3<-fakedata(z3,100)
yhat3<-perceptrain(fake.data3$S,fake.data3$y)
perceptrain<-function(S,y){
k<-1
z_history<-matrix(NA,nrow=10000,ncol=ncol(S))
z_history[1,]<-rep(1,length(z))
while (1){
#y<-fake.data$y
yhat<-classify(S,z_history[k,])
indicator<-ifelse(y==yhat,0,1)
a<-abs(z_history[k,]%*%t(S))
cost<-sum(a*indicator)
#cost<-sum(indicator%*%abs(z%*%(cbind(rep(1,ncol(fake.data$S)),fake.data$S[,-ncol(fake.data$S)]))))
#if (cost<=0.0001|k>=nrow(z_history))
if (cost==0)
break
else {
derivative<-colSums(indicator*(-y)*S)
z_history[k+1,]<-z_history[k,]-(1/k)*derivative
k<-k+1
}
}
iteration<-which(is.na(z_history))[1]
#list<-list(iteration,z_history)
#names(list)<-c("iteration","z_history")
return(z_history[1:(iteration-1),])
}
head(perceptrain(fake.data$S,fake.data$y))
perceptrain<-function(S,y){
k<-1
z_history<-matrix(NA,nrow=10000,ncol=ncol(S))
z_history[1,]<-rep(1,length(z))
while (1){
#y<-fake.data$y
yhat<-classify(S,z_history[k,])
indicator<-ifelse(y==yhat,0,1)
a<-abs(z_history[k,]%*%t(S))
cost<-sum(a*indicator)
#cost<-sum(indicator%*%abs(z%*%(cbind(rep(1,ncol(fake.data$S)),fake.data$S[,-ncol(fake.data$S)]))))
#if (cost<=0.0001|k>=nrow(z_history))
if (cost==0)
break
else {
derivative<-colSums(indicator*(-y)*S)
z_history[k+1,]<-z_history[k,]-(1/k)*derivative
k<-k+1
}
}
iteration<-which(is.na(z_history))[1]
list<-list(iteration,z_history[1:(iteration-1),])
names(list)<-c("iteration","z_history")
return(list)
}
head(perceptrain(fake.data$S,fake.data$y))
c(perceptrain(fake.data$S,fake.data$y)[[1]],head(perceptrain(fake.data$S,fake.data$y)[[2]])
)
list(perceptrain(fake.data$S,fake.data$y)[[1]],head(perceptrain(fake.data$S,fake.data$y)[[2]]))
#Create function "classify"
classify<-function(S,z){
yhat<- NA
for (i in 1:nrow(S)){
yhat[i]<- ifelse(S[i,]%*%z<=0,-1,1)
}
return (yhat)
}
#Simulate data
set.seed(100)
z<-rnorm(3,mean=7,sd=3)
#c<--z[length(z)]
fake.data<-fakedata(z,100)
#Apply the function
classify(fake.data$S,z)
perceptrain<-function(S,y){
k<-1
z_history<-matrix(NA,nrow=10000,ncol=ncol(S))
z_history[1,]<-rep(1,length(z))
while (1){
#y<-fake.data$y
yhat<-classify(S,z_history[k,])
indicator<-ifelse(y==yhat,0,1)
a<-abs(z_history[k,]%*%t(S))
cost<-sum(a*indicator)
#cost<-sum(indicator%*%abs(z%*%(cbind(rep(1,ncol(fake.data$S)),fake.data$S[,-ncol(fake.data$S)]))))
#if (cost<=0.0001|k>=nrow(z_history))
if (cost==0)
break
else {
derivative<-colSums(indicator*(-y)*S)
z_history[k+1,]<-z_history[k,]-(1/k)*derivative
k<-k+1
}
}
iteration<-which(is.na(z_history))[1]
list<-list(iteration,z_history[1:(iteration-1),])
names(list)<-c("iteration","z_history")
return(list)
}
list.output<-list(perceptrain(fake.data$S,fake.data$y)[[1]],head(perceptrain(fake.data$S,fake.data$y)[[2]]))
names(list.output)<-c("Iteration","z_history")
perceptrain<-function(S,y){
k<-1
z_history<-matrix(NA,nrow=10000,ncol=ncol(S))
z_history[1,]<-rep(1,length(z))
while (1){
#y<-fake.data$y
yhat<-classify(S,z_history[k,])
indicator<-ifelse(y==yhat,0,1)
a<-abs(z_history[k,]%*%t(S))
cost<-sum(a*indicator)
#cost<-sum(indicator%*%abs(z%*%(cbind(rep(1,ncol(fake.data$S)),fake.data$S[,-ncol(fake.data$S)]))))
#if (cost<=0.0001|k>=nrow(z_history))
if (cost==0)
break
else {
derivative<-colSums(indicator*(-y)*S)
z_history[k+1,]<-z_history[k,]-(1/k)*derivative
k<-k+1
}
}
iteration<-which(is.na(z_history))[1]
list<-list(iteration,z_history[1:(iteration-1),])
names(list)<-c("iteration","z_history")
return(list)
}
list.output<-list(perceptrain(fake.data$S,fake.data$y)[[1]],head(perceptrain(fake.data$S,fake.data$y)[[2]]))
names(list.output)<-c("Iteration","z_history")
list.output
z3<-rnorm(3)
fake.data3<-fakedata(z3,100)
yhat3<-perceptrain(fake.data3$S,fake.data3$y)
#The misclassification rate is
length(yhat3[yhat3!=fake.data3$y])
yhat3
length(yhat3[[2]][yhat3!=fake.data3$y])
unlist(yhat3)
as.matrix(yhat3[[2]])
fake.data(as.matrix(yhat3[[2]])[nrow(as.matrix(yhat3[[2]])),])
fakedata(as.matrix(yhat3[[2]])[nrow(as.matrix(yhat3[[2]])),])
fakedata(as.matrix(yhat3[[2]])[nrow(as.matrix(yhat3[[2]])),],n=100)
fakedata(as.matrix(yhat3[[2]])[nrow(as.matrix(yhat3[[2]])),],n=100)$y==fake.data3$y
as.matrix(yhat3[[2]])[nrow(as.matrix(yhat3[[2]])),]
length(index[index==T])/100
length(index[index==TRUE])/100
index<-fakedata(as.matrix(yhat3[[2]])[nrow(as.matrix(yhat3[[2]])),],n=100)$y==fake.data3$y
index[index==TRUE]
str(index[index==TRUE])
length(as.vector(index[index==TRUE])/100
)
length(as.vector(index[index==TRUE]))/100
length(as.vector(index[index==FALSE]))/100
require(dismo)
require(sp)
require(geosphere)
require(ggplot2)
require(ggmap)
require(rgeos)
require(scales)
require(raster)
require(httr)
require(httpuv)
require(jsonlite)
require(base64enc)
### I believe this section is now obsolete due to Vikas's code. Vikas can you please edit this to reflect your changes?
### Ideally it will merely use "source" and reference your function you created, similarly to later code blocks.
# Your credentials, from https://www.yelp.com/developers/manage_api_keys
consumerKey = "l_rSuqvu8nD49nJ7Y3uGKw"
consumerSecret = "AZA-PdWtTt2PCTK5SFp792LGHUI"
token = "	tzJ8ZyDR2jeAm4SAEMOkJJe5gFPOkwBl"
token_secret = "e89np3uLyLE5ffunidczgL_HpRY"
yelp_query <- function(path, query_args) {
# Use OAuth to authorize your request.
myapp <- oauth_app("YELP", key=consumerKey, secret=consumerSecret)
sig <- sign_oauth1.0(myapp, token=token, token_secret=token_secret)
# Build Yelp API URL.
scheme <- "https"
host <- "api.yelp.com"
yelpurl <- paste0(scheme, "://", host, path)
# Make request.
results <- GET(yelpurl, sig, query=query_args)
# If status is not success, print some debugging output.
HTTP_SUCCESS <- 200
if (results$status != HTTP_SUCCESS) {
print(results)
}
return(results)
}
yelp_search <- function(term, location, limit=10) {
# Search term and location go in the query string.
path <- "/v2/search"
query_args <- list(term=term, location=location, limit=limit)
# Make request.
results <- yelp_query(path, query_args)
return(results)
}
yelp_business <- function(business_id) {
# Business ID goes in the path.
path <- paste0("/v2/business/", business_id)
query_args <- list()
# Make request.
results <- yelp_query(path, query_args)
return(results)
}
print_search_results <- function(yelp_search_result) {
print("=== Search Results ===")
# Load data.  Flip it around to get an easy-to-handle list.
locationdataContent = content(yelp_search_result)
locationdataList=jsonlite::fromJSON(toJSON(locationdataContent))
# Print output.
print(head(data.frame(locationdataList)))
}
print_business_results <- function(yelp_business_result) {
print("=== Business ===")
print(content(yelp_business_result))
}
demo <- function(searchTerm, neighborhood, borough, limit) {
### THIS ONLY RETURNS FIRST 40. We will have to implement the built in "offset" to acquire ALL results.
lat <- vector()
lon <- vector()
businessName <- vector()
# Query Yelp API, print results.
yelp_search_result <- yelp_search(term=tolower(searchTerm), location=paste0(neighborhood, ", " , borough,", NY"), limit=limit)
# Pick the top search result, get more info about it.
# Find Yelp business ID, such as "giacomos-ristorante-boston".
#business_id = content(yelp_search_result)$businesses[[39]]$id
#yelp_business_result <- yelp_business(business_id)
numResults <- length(content(yelp_search_result)$businesses)
for (i in 1:numResults){
lat[i] <- content(yelp_search_result)$businesses[[i]]$location$coordinate$latitude
lon[i] <- content(yelp_search_result)$businesses[[i]]$location$coordinate$longitude
businessName[i] <- content(yelp_search_result)$businesses[[i]]$name
}
df <- as.data.frame(cbind(lon, lat, businessName))
colnames(df) <- c("LON", "LAT", "name")
return(df)
}
nbh <- read.csv("../data/neighborhoods.csv", header=TRUE)
allStarbucks <- allMcDonalds <- otherWifi <- vector()
for (borough in 1:dim(nbh)[2]){
borough_name <- colnames(nbh)[borough]
for (neigh in 1:dim(nbh)[1]){
neigh_name <- nbh[neigh, borough]
if (neigh_name != ""){
allStarbucks <- rbind(allStarbucks, demo("Starbucks", neigh_name, borough_name, 40))
allMcDonalds <- rbind(allMcDonalds, demo("McDonalds", neigh_name, borough_name, 40))
otherWifi <- rbind(otherWifi, demo("free wifi", neigh_name, borough_name, 40))
}
}
}
allStarbucks <- unique(allStarbucks)
allMcDonalds <- unique(allMcDonalds)
otherWifi <- unique(otherWifi)
allStarbucks <- allStarbucks[allStarbucks$name == "Starbucks",]
allMcDonalds <- allMcDonalds[allMcDonalds$name == "McDonald's",]
row.names(allStarbucks) <- 1:nrow(allStarbucks)
row.names(allMcDonalds) <- 1:nrow(allMcDonalds)
row.names(otherWifi) <- 1:nrow(otherWifi)
rest_pubWifi <- rbind(allStarbucks,allMcDonalds,otherWifi)
colnames(rest_pubWifi) <- c("LON", "LAT", "network")
### (1) Public WiFi Data
# Load in and format Public WiFi locations
data1 <- read.csv("../data/Free_WiFi_Hotspots_09042005.csv", header=TRUE)
data2 <- read.csv("../data/LinkNYC_Locations.csv", header=TRUE)
data_c1 <- subset(data1, select=c(LON, LAT, SSID))
data_c2 <- subset(data2, select=c(Longitude, Latitude, CB.Link.ID))
colnames(data_c1) <- colnames(data_c2) <- c("LON", "LAT","network")
### (2) Taxi Data
# Load in Taxi Data
url <-"https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2016-02.csv"
data <- read.csv(url, header=TRUE, as.is=TRUE)
url <-"https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2016-02.csv"
data <- read.csv(url, header=TRUE, as.is=TRUE)
data <- read.csv(url, header=TRUE, as.is=TRUE)
### (2) Taxi Data
# Load in Taxi Data
url <-"https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2016-02.csv"
#data <- read.csv(url, header=TRUE, as.is=TRUE)
data<-read.csv("../data/yellow_tripdata_2016-02.csv")
# Clean up taxi data by using both pickup/dropoff, removing empty coordinates, and removing likely erroneous coordinates.
pts <- as.data.frame(cbind(data$pickup_longitude, data$pickup_latitude, data$tpep_pickup_datetime))
colnames(pts) <- c("LON", "LAT", "TIME")
pts2 <- as.data.frame(cbind(data$dropoff_longitude, data$dropoff_latitude, data$tpep_dropoff_datetime))
colnames(pts2) <- c("LON", "LAT", "TIME")
pts3 <- as.data.frame(rbind(pts,pts2))
pts3$LON <- as.numeric(as.character(pts3$LON))
pts3$LAT <- as.numeric(as.character(pts3$LAT))
pts4 <- pts3[(pts3$LAT != 0) & (pts3$LON != 0),]
pts5 <- pts4[(pts4$LAT >= 38) & (pts4$LAT <= 44) & (pts4$LON <= -72) & (pts4$LON >= -76),]
# Remove the following line to use ALL taxi data
pts6 <- pts5[1:500000,]
# Load in shapefile
nycShapeFile <- shapefile("../data/nynta_16d/nynta.shp")
# Tag lat/lon coordinates with their respective neighborhood for taxi data
source("../doc/identifyNeighborhoodsAndBoroughs.R")
taxiData <- identifyNeighborhoodsAndBoroughs(pts6, nycShapeFile)
### (3) Identify centroids of shapefile regions
# Find centroids of shapefile regions and write to CSV.
source("../doc/acquireShapefileCentroids.R")
centroids <- acquireShapefileCentroids("../data/nynta_16d/nynta.shp")
install.packages("GISTools")
shiny::runApp('Desktop/Spr2017-proj2-grp1/app')
centroids <- acquireShapefileCentroids("../data/nynta_16d/nynta.shp")
write.csv(centroids, file="../output/shapefile_neighborhood_centroids.csv")
yelpData <- read.csv("../output/yelpdata.csv", header=TRUE)
yelpData <- subset(yelpData, select=-c(X))
wifiData <- as.data.frame(rbind(data_c1, data_c2, yelpData))
wifiData <- identifyNeighborhoodsAndBoroughs(wifiData, nycShapeFile)
source("../doc/createHeatMap.R")
wifiHeatMap <- createHeatMap(neighborhood ="Murray Hill-Kips Bay", "Manhattan", wifiData, "blue")
install.packages("ggproto")
wifiHeatMap <- createHeatMap(neighborhood ="Murray Hill-Kips Bay", "Manhattan", wifiData, "blue")
install.packages("ggproto")
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
wifiHeatMap <- createHeatMap(neighborhood ="Murray Hill-Kips Bay", "Manhattan", wifiData, "blue")
install.packages("GeomRasterAnn")
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
library(shiny)
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
### (5) Heatmap Creation
# Plot heatmaps of wifi and taxi data
source("../doc/createHeatMap.R")
# Show WiFi Coverage Heatmap
wifiHeatMap <- createHeatMap(neighborhood ="Murray Hill-Kips Bay", "Manhattan", wifiData, "blue")
install.packages("ggmap")
wifiHeatMap <- createHeatMap(neighborhood ="Murray Hill-Kips Bay", "Manhattan", wifiData, "blue")
library(ggmap)
wifiHeatMap <- createHeatMap(neighborhood ="Murray Hill-Kips Bay", "Manhattan", wifiData, "blue")
library("ggplot2")
wifiHeatMap <- createHeatMap(neighborhood ="Murray Hill-Kips Bay", "Manhattan", wifiData, "blue")
createHeatMap <- function(neighborhood="empty", borough, data, mapColor="blue"){
if (neighborhood == "empty"){
centroids <- read.csv("/Users/xuehan/Desktop/Spr2017-proj2-grp1/output/borough_centroids.csv", header=TRUE)
centroidLAT <- centroids$LAT[centroids$borough==borough]
centroidLON <- centroids$LON[centroids$borough==borough]
initMap <- get_map(location = c(lon = centroidLON, lat = centroidLAT), zoom = 11)
heatmap <- ggmap(initMap, extent = "device") + stat_density2d(data = data[(data$borough == borough),], aes(x = LON, y = LAT, fill = ..level.., alpha = ..level..), size = 0.01, bins = 16, geom = "polygon") + scale_fill_gradient(low = mapColor, high = paste0(mapColor, "4")) + scale_alpha(range = c(0, 0.5), guide = FALSE)
} else {
centroids <- read.csv("/Users/xuehan/Desktop/Spr2017-proj2-grp1/output/shapefile_neighborhood_centroids.csv", header=TRUE)
centroidLAT <- centroids$LAT[centroids$neighborhood==neighborhood]
centroidLON <- centroids$LON[centroids$neighborhood==neighborhood]
initMap <- get_map(location = c(lon = centroidLON, lat = centroidLAT), zoom = 15)
heatmap <- ggmap(initMap, extent = "device") + stat_density2d(data = data[(data$neighborhood == neighborhood),], aes(x = LON, y = LAT, fill = ..level.., alpha = ..level..), size = 0.01, bins = 16, geom = "polygon") + scale_fill_gradient(low = mapColor, high = paste0(mapColor, "4")) + scale_alpha(range = c(0, 0.5), guide = FALSE)
}
return(heatmap)
}
createComboHeatMap <- function(neighborhood="None", borough, wifiData, taxiData, wifiColor="blue", taxiColor="red"){
if (neighborhood == "None"){
centroids <- read.csv("/Users/xuehan/Desktop/Spr2017-proj2-grp1/output/borough_centroids.csv", header=TRUE)
centroidLAT <- centroids$LAT[centroids$borough==borough]
centroidLON <- centroids$LON[centroids$borough==borough]
initMap <- get_map(location = c(lon = centroidLON, lat = centroidLAT), zoom = 12)
fullData <- rbind(data.frame(taxiData[(taxiData$borough == borough),], group="Foot Traffic"), data.frame(wifiData[(wifiData$borough == borough),], group="WiFi Coverage"))
heatmap <- ggmap(initMap, extent = "device") +
stat_density2d(data = fullData,
aes(x = LON, y = LAT, fill = group, alpha = ..level..),
size = 0.01, bins = 16, geom = "polygon") +
scale_fill_manual(values=c("Foot Traffic"=taxiColor, "WiFi Coverage"=wifiColor)) +
scale_alpha(range = c(0, 0.5))
} else {
centroids <- read.csv("/Users/xuehan/Desktop/Spr2017-proj2-grp1/output/shapefile_neighborhood_centroids.csv", header=TRUE)
centroidLAT <- centroids$LAT[centroids$neighborhood==neighborhood]
centroidLON <- centroids$LON[centroids$neighborhood==neighborhood]
initMap <- get_map(location = c(lon = centroidLON, lat = centroidLAT), zoom = 15)
fullData <- rbind(data.frame(taxiData[(taxiData$neighborhood == neighborhood),], group="Foot Traffic"), data.frame(wifiData[(wifiData$neighborhood == neighborhood),], group="WiFi Coverage"))
heatmap <- ggmap(initMap, extent = "device") +
stat_density2d(data = fullData,
aes(x = LON, y = LAT, fill = group, alpha = ..level..),
size = 0.01, bins = 16, geom = "polygon") +
scale_fill_manual(values=c("Foot Traffic"=taxiColor, "WiFi Coverage"=wifiColor)) +
scale_alpha(range = c(0, 0.3))
}
return(heatmap)
}
### (5) Heatmap Creation
# Plot heatmaps of wifi and taxi data
source("../doc/createHeatMap.R")
# Show WiFi Coverage Heatmap
wifiHeatMap <- createHeatMap(neighborhood ="Murray Hill-Kips Bay", "Manhattan", wifiData, "blue")
taxiHeatMap <- createHeatMap(neighborhood="Murray Hill-Kips Bay", "Manhattan", taxiData, "red")
taxiHeatMap
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
wifiHeatMap <- createHeatMap(neighborhood ="Murray Hill-Kips Bay", "Manhattan", wifiData, "blue")
library("ggmap")
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
wifiHeatMap <- createHeatMap(neighborhood ="Murray Hill-Kips Bay", "Manhattan", wifiData, "blue")
library("ggmap")
library("ggmap")
library("ggplot2")
wifiHeatMap <- createHeatMap(neighborhood ="Murray Hill-Kips Bay", "Manhattan", wifiData, "blue")
wifiHeatMap
taxiHeatMap <- createHeatMap(neighborhood="Murray Hill-Kips Bay", "Manhattan", taxiData, "red")
taxiHeatMap <- createHeatMap(neighborhood="Murray Hill-Kips Bay", "Manhattan", taxiData, "red")
taxiHeatMap
wifiData <- subset(wifiData, select=-c(network))
taxiData <- subset(taxiData, select=-c(TIME))
comboMap <- createComboHeatMap("Murray Hill-Kips Bay", borough="Manhattan", wifiData, taxiData, "blue", "red")
comboMap
comboMap2 <- createComboHeatMap("None", borough="Bronx", wifiData, taxiData, "blue", "red")
comboMap2
shiny::runApp('Desktop/Spr2017-proj2-grp1/app')
library(choroplethr)
library(choroplethrZip)
library(dplyr)
library(raster)
library(rgeos)
library(ggmap)
library(ggplot2)
source("../doc/identifyNeighborhoodsAndBoroughs.R")
source("../doc/identifyNeighborhoodsAndBoroughs.R")
nycShapeFile <- shapefile("../data/nynta_16d/nynta.shp")
source("../doc/createHeatMap.R")
?source
source("../doc/identifyNeighborhoodsAndBoroughs.R")
source("../doc/identifyNeighborhoodsAndBoroughs.R")
source("../doc/identifyNeighborhoodsAndBoroughs.R")
source("../doc/identifyNeighborhoodsAndBoroughs.R")
source("../doc/identifyNeighborhoodsAndBoroughs.R")
source("../doc/createHeatMap.R")
source("../doc/identifyNeighborhoodsAndBoroughs.R")
shiny::runApp('Desktop/Spr2017-proj2-grp1/app')
runApp('Desktop/Spr2017-proj2-grp1/app')
